// Code generated by go-swagger; DO NOT EDIT.
// So it's not Default main.go because this file is already overwrite for customization!
// Do not delete or remove this file!

package main

import (
	"net/http"
	"os"
	"path/filepath"

	rest_goswagger_api "github.com/ramadoiranedar/rest-goswagger-api"

	"github.com/casualjim/middlewares"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/swag"
	flags "github.com/jessevdk/go-flags"
	"github.com/justinas/alice"
	"github.com/sirupsen/logrus"
	"github.com/spf13/viper"

	"github.com/ramadoiranedar/rest-goswagger-api/gen/restapi"
	"github.com/ramadoiranedar/rest-goswagger-api/gen/restapi/operations"
	"github.com/ramadoiranedar/rest-goswagger-api/internal/handlers"
	"github.com/ramadoiranedar/rest-goswagger-api/internal/routes"
	"github.com/ramadoiranedar/rest-goswagger-api/internal/rest"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!
// This file is already overwrite
var mainFlags = struct {
	AppConfig string `long:"config" description:"Main application configuration YAML path"`
}{}

func main() {
	log := initLogger()

	_, api := initializeAPI(log)
	server := initializeServer(api)
	defer server.Shutdown()

	parser := initializeParser(server, api, log)

	if _, err := parser.Parse(); err != nil {
		handleParseError(err)
	}

	rt := initializeRuntime(log)
	defer rt.Close()

	h := handlers.NewHandler()

	configureAPI(rt, api, &h)

	handler := createHandler(log, api)
	server.SetHandler(handler)

	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}
}

func initializeAPI(log logrus.FieldLogger) (*loads.Document, *operations.RestGoswaggerAPIServerAPI) {
	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		log.Fatalln(err)
	}
	api := operations.NewRestGoswaggerAPIServerAPI(swaggerSpec)
	api.Logger = log.Infof
	api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{
		{
			ShortDescription: "App Flags",
			LongDescription:  "",
			Options:          &mainFlags,
		},
	}
	return swaggerSpec, api
}

func initializeServer(api *operations.RestGoswaggerAPIServerAPI) *restapi.Server {
	server := restapi.NewServer(api)
	server.ConfigureFlags()
	return server
}

func initializeParser(server interface{}, api *operations.RestGoswaggerAPIServerAPI, log logrus.FieldLogger) *flags.Parser {
	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "REST API Template GoSwagger v2 developed by Damar"
	parser.LongDescription = "For basic structure template REST APIs using GoSwagger v2 developed by Damar"

	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}
	return parser
}

func handleParseError(err error) {
	code := 1
	if fe, ok := err.(*flags.Error); ok {
		if fe.Type == flags.ErrHelp {
			code = 0
		}
	}
	os.Exit(code)
}

func initializeRuntime(log logrus.FieldLogger) *rest_goswagger_api.Runtime {
	rt, err := rest_goswagger_api.NewRuntime(initConfig(log), log)
	if err != nil {
		log.Fatalln(err)
	}
	return rt
}

func configureAPI(rt *rest_goswagger_api.Runtime, api *operations.RestGoswaggerAPIServerAPI, h *handlers.Handler) {
	rest.Authorization(rt, api)
	routes.Route(rt, api, *h)
}

func createHandler(log logrus.FieldLogger, api *operations.RestGoswaggerAPIServerAPI) http.Handler {
	return alice.New(
		middlewares.NewRecoveryMW("template-goswager-damar", log),
		middlewares.NewProfiler,
	).Then(api.Serve(nil))
}

func initLogger() logrus.FieldLogger {
	customFormatter := new(logrus.TextFormatter)
	customFormatter.TimestampFormat = "2006-01-02 15:04:05"
	customFormatter.FullTimestamp = true
	logrus.SetFormatter(customFormatter)
	logrus.SetLevel(logrus.DebugLevel)
	return logrus.StandardLogger()
}

func initConfig(log logrus.FieldLogger) *viper.Viper {
	log.Infof("Checking configuration %s", mainFlags.AppConfig)

	cfg := viper.New()
	cfg.SetConfigName(filepath.Base(mainFlags.AppConfig))
	cfg.SetConfigType("yaml")
	cfg.AddConfigPath(filepath.Dir(mainFlags.AppConfig))
	cfg.AddConfigPath("./configs/")
	cfg.AddConfigPath("./etc/")
	cfg.AddConfigPath("./")

	err := cfg.ReadInConfig()
	if err != nil {
		log.Errorf("Invalid app config at %s", mainFlags.AppConfig)
		os.Exit(1)
	}

	log.Info("Configuration app is OK")
	return cfg
}
