# Swagger OpenAPI v2
# note: 
# please make sure naming of the components based on definition object name
# and follow the code style
swagger: "2.0"
info:
  description: "For basic structure template REST APIs using GoSwagger v2 developed by Damar"
  title: "REST API Template GoSwagger v2 developed by Damar"
  version: "1.0.0"
produces:
  - application/json
consumes:
  - application/json
  - multipart/form-data
schemes:
  - http
host: "localhost:8080" #base url
securityDefinitions:
  key:
    type: "apiKey"
    in: "header"
    name: "x-app-key"
  hasRole:
    type: apiKey
    in: header
    name: "x-access-role"
  hasProvider:
    type: apiKey
    in: header
    name: "x-provider-id"
  isPeople:
    type: apiKey
    in: header
    name: "x-people-id"
  # Start of role by jwt payload
  hasRoleAdmin:
    type: apiKey
    in: header
    name: Authorization
  hasRoleUser:
    type: apiKey
    in: header
    name: Authorization
  # End of role by jwt payload
security:
  - key: []

# --Start of paths
paths:
  # health
  /health:
    get:
      summary: "health check server"
      description: "endpoint for check health server"
      tags:
        - app
      security: []
      # Example for implement security
      # security:
      #   - key: []
      #   - hasRole:
      #       - admin
      #       - people
      #   - isPeople: []
      responses:
        default:
          description: default
          schema:
            $ref: "#/definitions/basicResponse"
        200:
          description: ok
          schema:
            $ref: "#/definitions/basicResponse"
        201:
          description: created
          schema:
            $ref: "#/definitions/basicResponse"
        400:
          description: bad request
          schema:
            $ref: "#/definitions/basicResponse"
        401:
          description: unauthorized
          schema:
            $ref: "#/definitions/basicResponse"
        403:
          description: forbidden
          schema:
            $ref: "#/definitions/basicResponse"
        404:
          description: not found
          schema:
            $ref: "#/definitions/basicResponse"
        405:
          description: method not allowed
          schema:
            $ref: "#/definitions/basicResponse"
        415:
          description: unsupported media type
          schema:
            $ref: "#/definitions/basicResponse"
        422:
          description: unprocessable entity
          schema:
            $ref: "#/definitions/basicResponse"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/basicResponse"
        502:
          description: bad gateway
          schema:
            $ref: "#/definitions/basicResponse"
  # End of health

  # auth
  /auth/login:
    post:
      summary: "authentication login"
      description: "endpoint for authentication login and get access token"
      tags:
        - auth
      security: []
      parameters:
        - name: email
          in: formData
          type: string
          format: email
          maxLength: 255
          required: true
          description: "Example: example@mail.com"
        - name: password
          in: formData
          type: string
          minLength: 5
          maxLength: 255
          required: true
      responses:
        default:
          description: default
          schema:
            $ref: "#/definitions/basicResponse"
        200:
          description: ok
          schema:
            $ref: "#/definitions/postAuthLoginResponse"
        201:
          description: created
          schema:
            $ref: "#/definitions/basicResponse"
        400:
          description: bad request
          schema:
            $ref: "#/definitions/basicResponse"
        401:
          description: unauthorized
          schema:
            $ref: "#/definitions/basicResponse"
        403:
          description: forbidden
          schema:
            $ref: "#/definitions/basicResponse"
        404:
          description: not found
          schema:
            $ref: "#/definitions/basicResponse"
        405:
          description: method not allowed
          schema:
            $ref: "#/definitions/basicResponse"
        415:
          description: unsupported media type
          schema:
            $ref: "#/definitions/basicResponse"
        422:
          description: unprocessable entity
          schema:
            $ref: "#/definitions/basicResponse"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/basicResponse"
        502:
          description: bad gateway
          schema:
            $ref: "#/definitions/basicResponse"
  /auth/registration:
    post:
      summary: "authentication registration"
      description: "endpoint for authentication registration"
      tags:
        - auth
      security: []
      parameters:
        - name: fullname
          in: formData
          type: string
          maxLength: 255
          required: true
        - name: email
          in: formData
          type: string
          format: email
          description: "Example: example@mail.com"
          maxLength: 255
          required: true
        - name: password
          in: formData
          type: string
          minLength: 5
          maxLength: 255
          required: true
      responses:
        default:
          description: default
          schema:
            $ref: "#/definitions/basicResponse"
        200:
          description: ok
          schema:
            $ref: "#/definitions/basicResponse"
        201:
          description: created
          schema:
            $ref: "#/definitions/postAuthRegistrationResponse"
        400:
          description: bad request
          schema:
            $ref: "#/definitions/basicResponse"
        401:
          description: unauthorized
          schema:
            $ref: "#/definitions/basicResponse"
        403:
          description: forbidden
          schema:
            $ref: "#/definitions/basicResponse"
        404:
          description: not found
          schema:
            $ref: "#/definitions/basicResponse"
        405:
          description: method not allowed
          schema:
            $ref: "#/definitions/basicResponse"
        415:
          description: unsupported media type
          schema:
            $ref: "#/definitions/basicResponse"
        422:
          description: unprocessable entity
          schema:
            $ref: "#/definitions/basicResponse"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/basicResponse"
        502:
          description: bad gateway
          schema:
            $ref: "#/definitions/basicResponse"
  # End of auth

  # role
  /role:
    post:
      summary: "create new role"
      description: "endpoint for create a new role"
      tags:
        - role
      security:
        - key: []
          hasRoleAdmin: []
      parameters:
        - name: name
          in: formData
          type: string
          maxLength: 255
          required: true
        - name: slug
          in: formData
          type: string
          minLength: 5
          maxLength: 255
          required: true
      responses:
        default:
          description: default
          schema:
            $ref: "#/definitions/basicResponse"
        200:
          description: ok
          schema:
            $ref: "#/definitions/basicResponse"
        201:
          description: created
          schema:
            $ref: "#/definitions/basicResponse"
        400:
          description: bad request
          schema:
            $ref: "#/definitions/basicResponse"
        401:
          description: unauthorized
          schema:
            $ref: "#/definitions/basicResponse"
        403:
          description: forbidden
          schema:
            $ref: "#/definitions/basicResponse"
        404:
          description: not found
          schema:
            $ref: "#/definitions/basicResponse"
        405:
          description: method not allowed
          schema:
            $ref: "#/definitions/basicResponse"
        415:
          description: unsupported media type
          schema:
            $ref: "#/definitions/basicResponse"
        422:
          description: unprocessable entity
          schema:
            $ref: "#/definitions/basicResponse"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/basicResponse"
        502:
          description: bad gateway
          schema:
            $ref: "#/definitions/basicResponse"
  # End of role


# --End of paths

# --Start of definitions
definitions:
  code:
    type: integer
    format: int32
    x-omitempty: true
  message:
    type: string
    x-omitempty: true
  basicResponse:
    description: definition for basic response code & message when request to endpoint was successful
    type: object
    properties:
      code:
        $ref: "#/definitions/code"
      message:
        $ref: "#/definitions/message"
  dataResponse:
    description: definition for basic response code & message when request to endpoint was successful
    type: object
    properties:
      data:
        type: object
        format: interface
        x-omitempty: true
  postAuthLoginResponse:
    type: object
    properties:
      code: 
        $ref: "#/definitions/code"
      message:
        $ref: "#/definitions/message"
      data:
        $ref: "#/definitions/postAuthLoginDataResponse"
  postAuthLoginDataResponse:
    type: object
    properties: 
      token:
        type: string
        format: interface
        x-omitempty: false
      payload_jwt:
        $ref: "#/definitions/payload_jwt"
  postAuthRegistrationResponse:
    type: object
    properties:
      code: 
        $ref: "#/definitions/code"
      message:
        $ref: "#/definitions/message"
  principal:
    type: object
    properties:
      user_id:
        type: integer
        format: uint64
        x-omitempty: true
      email:
        type: string
        format: email
        maxLength: 255
        x-omitempty: true
      role:
        type: string
        maxLength: 255
        x-omitempty: true
      provider:
        type: string
        maxLength: 255
        x-omitempty: true
      people:
        type: string
        maxLength: 255
        x-omitempty: true
      expired_at:
        type: integer
        format: date-time
  payload_jwt:
    type: object
    properties:
      user_id:
        type: integer
        format: uint64
        x-omitempty: false
      email:
        type: string
        format: email
        x-omitempty: false
      role_slug:
        type: string
        x-omitempty: false
      issued_at:
        type: string
        format: date-time
        x-omitempty: false
      expired_at:
        type: string
        format: date-time
  pagination:
    type: "object"
    properties:
      current_page:
        type: integer
        x-omitempty: true
        example: 1
      per_page:
        type: integer
        x-omitempty: true
        example: 10
      total_data:
        type: integer
        x-omitempty: true
        example: 100
      total_page:
        type: integer
        x-omitempty: true
        example: 10
  
  # model data
  modelTimeTrace:
    type: object
    properties:
      created_at:
        type: integer
        format: date-time
        x-omitempty: false
        x-go-custom-tag: gorm:"type:int; autoCreateTime;"
      updated_at:
        type: integer
        format: date-time
        x-omitempty: false
        x-go-custom-tag: gorm:"type:int; autoUpdateTime;"
      deleted_at:
        type: object
        x-omitempty: false
        x-go-type:
          type: DeletedAt
          import:
            package: gorm.io/plugin/soft_delete
          hints:
            kind: interface
  modelIdentifier:
    type: object
    required:
      - id
    properties:
      id:
        type: integer
        format: uint64
        x-go-custom-tag: gorm:"type:int; auto_increment; primaryKey"
        x-omitempty: false
  role:
    allOf:
      - $ref: "#/definitions/modelTimeTrace"
      - $ref: "#/definitions/modelIdentifier"
      - $ref: "#/definitions/dataRole"
  dataRole:
    type: object
    properties: 
      slug:
        type: string
        x-go-custom-tag: gorm:"type:varchar(255); uniqueIndex;"
        x-omitempty: false
        maxLength: 255
      name:
        type: string
        x-go-custom-tag: gorm:"type:varchar(255);"
        x-omitempty: false
        maxLength: 255
  user:
    allOf:
      - $ref: "#/definitions/modelTimeTrace"
      - $ref: "#/definitions/modelIdentifier"
      - $ref: "#/definitions/dataUser"
  dataUser:
    type: object
    required:
      - email
      - password
      - fullname
    properties:
      role:
        $ref: '#/definitions/role'
        x-go-custom-tag: gorm:"foreignKey:role_id;"
      role_id:
        type: number
        format: uint64
        x-go-custom-tag: gorm:"foreignKey:fk_userRole_role_role_id;"
        x-omitempty: false
      email:
        type: string
        x-go-custom-tag: gorm:"type:varchar(255); unique; notNull;"
        x-omitempty: false
        maxLength: 255
      fullname:
        type: string
        x-go-custom-tag: gorm:"type:varchar(255);"
        x-omitempty: false
        maxLength: 255
      password:
        type: string
        x-go-custom-tag: gorm:"type:varchar(255); notNull;"
        x-omitempty: false
        maxLength: 255
  # End of model data
# --End of definitions

# --Start of parameters
parameters: {}
# --End of parameters






